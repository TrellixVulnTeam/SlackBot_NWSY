"""
Slack chat-bot Lambda handler.
"""

import os
import logging
import urllib
import requests
import boto3
from slackclient import SlackClient

# Grab the Bot OAuth token from the environment.
BOT_TOKEN = os.environ["BOT_TOKEN"]

# Define the URL of the targeted Slack API resource.
# We'll send our replies there.
SLACK_URL = "https://slack.com/api/chat.postMessage"


def lambda_handler(data, context):
    """Handle an incoming HTTP request from a Slack chat-bot.
    """
    if "challenge" in data:
        return data["challenge"]
        
    # Grab the Slack event data.
    slack_event = data['event']

    sc = SlackClient(BOT_TOKEN)
    
    # We need to discriminate between events generated by 
    # the users, which we want to process and handle, 
    # and those generated by the bot.
    if "bot_id" in slack_event:
        logging.warn("Ignore bot event")
    else:
        # Get the text of the message the user sent to the bot,
        # and reverse it.
        
        type = data["type"]
        event_type = slack_event["type"]

        if event_type == "app_mention":

            # Get the ID of the channel where the message was posted.
            channel_id = slack_event["channel"]

            if "files" in slack_event:

                files = slack_event['files']

                s3 = boto3.client('s3')

                message = "The following files have been uploaded to AWS S3:" + '\n'
                for i in range(len(files)):
                    print(files[i]['url_private_download'])
                    response = requests.get(files[i]['url_private_download'], headers={'Authorization': 'Bearer %s' % BOT_TOKEN})

                    with open('/tmp/' + files[i]['title'], 'wb') as f:
                        f.write(response.text.encode())

                    s3.upload_file(
                        '/tmp/' + files[i]['title'],
                        os.environ['BUCKET_NAME'],
                        files[i]['title']
                    )

                    message += files[i]['title'] + '\n'


                # do this
                sc.api_call(
                    "chat.postMessage",
                    channel=channel_id,
                    text="File detected"
                )
                    

                
                # title = files[0]['title']

                # print(title)
                
                # filename = '/tmp/' + title

                # print(filename)

                # print(len(files))

                
                
                # print(response.text)

                

                



            else:
                print("no file")
                sc.api_call(
                    "chat.postMessage",
                    channel=channel_id,
                    text="File not detected"
                )


        
        # We need to send back three pieces of information:
        #     1. The reversed text (text)
        #     2. The channel id of the private, direct chat (channel)
        #     3. The OAuth token required to communicate with 
        #        the API (token)
        # Then, create an associative array and URL-encode it, 
        # since the Slack API doesn't not handle JSON (bummer).

        # data = urllib.parse.urlencode(
        #     (
        #         ("token", BOT_TOKEN),
        #         ("channel", channel_id),
        #         ("text", reversed_text + " " + type)
        #     )
        # )
        # data = data.encode("ascii")
        
        # # Construct the HTTP request that will be sent to the Slack API.
        # request = urllib.request.Request(
        #     SLACK_URL, 
        #     data=data, 
        #     method="POST"
        # )
        # # Add a header mentioning that the text is URL-encoded.
        # request.add_header(
        #     "Content-Type", 
        #     "application/x-www-form-urlencoded"
        # )
        
        # # Fire off the request!
        # urllib.request.urlopen(request).read()

        # slackclient implementation of chat.postMessage
        

    # Everything went fine.
    return "200 OK"